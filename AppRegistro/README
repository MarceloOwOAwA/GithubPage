Este proyecto implementa una API RESTful desarrollada con FastAPI y MongoDB para gestionar usuarios de manera segura, eficiente y modular.
Permite crear usuarios, autenticarlos mediante tokens JWT, y almacenar los datos de manera persistente utilizando una base de datos NoSQL.
 
Tecnologías utilizadas

  FastAPI – Framework moderno y rápido para la construcción de APIs con Python.
  MongoDB – Base de datos NoSQL para el almacenamiento de usuarios.
  Pydantic – Validación de datos con expresiones regulares y tipos estrictos.
  Passlib (bcrypt) – Hash seguro de contraseñas.
  Python-Jose – Generación y validación de tokens JWT.
  python-dotenv – Gestión de variables de entorno.
  Docker + Docker Compose – Contenedores para desplegar la API y MongoDB fácilmente.

Funcionalidades principales

Creación de usuarios con validación de datos:
  Validación de formato de correo, nombre y contraseña con expresiones regulares.
  Almacenamiento del usuario en MongoDB si no existe previamente.

Autenticación JWT:
  Generación de tokens JWT al autenticar un usuario con sus credenciales.
  Uso de tokens para proteger rutas privadas (autenticación por cabecera Authorization).

Validación de contraseñas:
  Las contraseñas se almacenan en formato hasheado usando bcrypt para evitar exposiciones.

Contenedorización completa:
  Todo el entorno puede desplegarse con docker-compose en cuestión de segundos.

Estructura de carpetas
    .
    ├── app/
    │   ├── main.py                # Punto de entrada de la API
    │   ├── models.py              # Esquemas Pydantic para validación
    │   ├── auth.py                # Funciones de hashing y JWT
    │   ├── database.py            # Conexión con MongoDB
    ├── .env                       # Variables sensibles (no se sube al repo)
    ├── requirements.txt           # Dependencias del proyecto
    ├── Dockerfile                 # Imagen de FastAPI
    ├── docker-compose.yml         # Servicio API + MongoDB
    └── README.md                  # Documentación del proyecto

Notas finales
  Este proyecto es ideal para aprender buenas prácticas de desarrollo backend con Python y despliegue con Docker.
  Las contraseñas y claves nunca se almacenan en texto plano.
  El sistema está preparado para escalar y extender funcionalidades fácilmente.
